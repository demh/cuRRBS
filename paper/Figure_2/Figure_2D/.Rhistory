3088.286401 * 1000 / 75
3088.286401 * 1000 / 75 / 5
###########################################################
##################### Dependencies ########################
###########################################################
suppressWarnings(suppressMessages(library(optparse)));
suppressWarnings(suppressMessages(library(dplyr)));
as.numeric(strsplit('0.25', ',')[[1]])
output_path <- '~/Desktop/methylation_clock/optimize_RRBS/cuRRBS_paper/Figure_2/Figure_2D/';
setwd(output_path);
## Parameters.
print('Reading parameters ...');
# Output path / working directory.
#output_path <- as.character(opt$output_path);
output_path <- '~/Desktop/methylation_clock/optimize_RRBS/cuRRBS_paper/Figure_2/Figure_2D/';
setwd(output_path);
# Minimum and maximum lengths of fragments to be considered.
#min_size <- as.numeric(opt$min_size);
min_size <- 0;
#max_size <- as.numeric(opt$max_size);
max_size <- 1000;
# Steps to be taken by the sliding window.
#window_step <- as.numeric(opt$exp_error);
window_step <- 20;
# Parameters regarding the changing window size.
min_window_size <- 1;
max_window_size <- max_size - min_size + 1;
#window_size_step <- as.numeric(opt$exp_error);
window_size_step <- 20;
# Other parameters.
#read_length <- as.numeric(opt$read_length);
read_length <- 75;
#C_Score <- as.numeric(strsplit(opt$Score_thresholds, ',')[[1]]);
C_Score <- 0.25;
#C_NF_1000 <- as.numeric(strsplit(opt$NF_thresholds, ',')[[1]]);
C_NF_1000 <- 0.2;
#activate_plotting_filter <- as.logical(opt$plot_filtered); # Create contour plots or not for the filtered landscapes
#activate_plotting_filter <- TRUE;
# Input files.
#fsd_file_path <- as.character(opt$fld_file);
fsd_file_path <- 'fl_distributions_MspI_BspQI.txt';
#si_file_path <- as.character(opt$fragments_file);
si_file_path <- 'fragments_of_interest_MspI_BspQI.txt';
#sites_annotation <- read.table(as.character(opt$annotation_file), sep=',', header=T);
sites_annotation <- read.table('PlacentalDMRs_hg38_coordinates.CG_positions_cuRRBS_edited.csv', sep=',', header=T);
sites_annotation[,1] <- as.character(sites_annotation[,1]);
# Final thresholds
max_score <- sum(as.numeric(sites_annotation[,4]));
Score_thr <- C_Score * max_score;
ref_NF_1000 <- 41177.15;  # It can be modified to compare with other protocol.
NF_thr <- C_NF_1000 * ref_NF_1000;
# Optimal size range
#opt_sr_input <- as.character(opt$optimal_sr);
opt_sr_input <- '60_540';
xopt <- as.numeric(strsplit(opt_sr_input, '-')[[1]][1]); # Lower limit in optimal size range
yopt <- as.numeric(strsplit(opt_sr_input, '-')[[1]][2]) - as.numeric(strsplit(opt_sr_input, '-')[[1]][1]) + 1; # Window size in optimal size range
opt_size_range <- paste0(xopt, '-', xopt+yopt-1, ' bp');
#exp_error <- as.numeric(opt$exp_error); # Experimental error used to calculate the robustness
exp_error <- 20;
opt_sr_input <- '60-540';
xopt <- as.numeric(strsplit(opt_sr_input, '-')[[1]][1]); # Lower limit in optimal size range
yopt <- as.numeric(strsplit(opt_sr_input, '-')[[1]][2]) - as.numeric(strsplit(opt_sr_input, '-')[[1]][1]) + 1; # Window size in optimal size range
opt_size_range <- paste0(xopt, '-', xopt+yopt-1, ' bp');
exp_error <- 20;
